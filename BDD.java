// Learn Stream
import java.io.*;

public class Roo{
	public static void main(String[] args) throws IOException{
		System.out.println("Hello;");
		try(Socket socket = new socket()){
			socket.connect(new InetS)
		}
	}
}






Составить запросы на языке SQL (пункты 1-7).
1. Сделать запрос для получения атрибутов из указанных таблиц, применив фильтры по указанным условиям:
Таблицы: Н_ЛЮДИ, Н_СЕССИЯ.
Вывести атрибуты: Н_ЛЮДИ.ФАМИЛИЯ, Н_СЕССИЯ.ЧЛВК_ИД.
Фильтры (AND): 
a) Н_ЛЮДИ.ФАМИЛИЯ > Ёлкин.
b) Н_СЕССИЯ.ИД > 14.
c) Н_СЕССИЯ.ИД > 27640.
Вид соединения: INNER JOIN.

select  Н_ЛЮДИ.ФАМИЛИЯ, Н_СЕССИЯ.ЧЛВК_ИД from Н_ЛЮДИ
	inner join Н_СЕССИЯ 
		on Н_ЛЮДИ.ИД = Н_СЕССИЯ.ЧЛВК_ИД
  where 
    Н_ЛЮДИ.ФАМИЛИЯ > 'Ёлкин' and 
  	Н_СЕССИЯ.ИД > 27640
;






2. Сделать запрос для получения атрибутов из указанных таблиц, применив фильтры по указанным условиям:
Таблицы: Н_ЛЮДИ, Н_ОБУЧЕНИЯ, Н_УЧЕНИКИ.
Вывести атрибуты: Н_ЛЮДИ.ИД, Н_ОБУЧЕНИЯ.ЧЛВК_ИД, Н_УЧЕНИКИ.НАЧАЛО.
Фильтры: (AND)
a) Н_ЛЮДИ.ИД = 142095.
b) Н_ОБУЧЕНИЯ.ЧЛВК_ИД = 163484.
Вид соединения: LEFT JOIN.

select Н_ЛЮДИ.ИД, Н_ОБУЧЕНИЯ.ЧЛВК_ИД, Н_УЧЕНИКИ.НАЧАЛО from Н_ЛЮДИ
	left outer join Н_ОБУЧЕНИЯ
		on Н_ОБУЧЕНИЯ.ЧЛВК_ИД = Н_ЛЮДИ.ИД
	left outer join Н_УЧЕНИКИ
		on Н_ОБУЧЕНИЯ.ЧЛВК_ИД = Н_УЧЕНИКИ.ЧЛВК_ИД
where Н_ЛЮДИ.ИД = 142095 and Н_ОБУЧЕНИЯ.ЧЛВК_ИД = 163484
;



3. Составить запрос, который ответит на вопрос, есть ли среди студентов вечерней формы обучения те, кто старше 25 лет.
select Н_ЛЮДИ.ИД, Н_ЛЮДИ.ФАМИЛИЯ, Н_ЛЮДИ.ИМЯ, Н_ЛЮДИ.ДАТА_РОЖДЕНИЯ from Н_ПЛАНЫ
	inner join Н_ФОРМЫ_ОБУЧЕНИЯ 
		on Н_ФОРМЫ_ОБУЧЕНИЯ.ИД = Н_ПЛАНЫ.ФО_ИД and
			Н_ФОРМЫ_ОБУЧЕНИЯ.НАИМЕНОВАНИЕ = 'Очно-заочная(вечерняя)'
	inner join Н_УЧЕНИКИ
		on Н_УЧЕНИКИ.ПЛАН_ИД = Н_ПЛАНЫ.ИД
	inner join Н_ОБУЧЕНИЯ
		on Н_ОБУЧЕНИЯ.ЧЛВК_ИД = Н_УЧЕНИКИ.ЧЛВК_ИД
	inner join Н_ЛЮДИ
		on Н_ЛЮДИ.ИД = Н_ОБУЧЕНИЯ.ЧЛВК_ИД and
			extract( YEAR from age(CURRENT_DATE, Н_ЛЮДИ.ДАТА_РОЖДЕНИЯ)) > 25
; 





4. Найти группы, в которых в 2011 году было более 10 обучающихся студентов на ФКТИУ.
Для реализации использовать подзапрос.

select T1.ГРУППА, T1.kol from (
		select Н_УЧЕНИКИ.ГРУППА, count(Н_УЧЕНИКИ.ИД) as kol from Н_УЧЕНИКИ
			inner join Н_ПЛАНЫ
				on Н_УЧЕНИКИ.ПЛАН_ИД = Н_ПЛАНЫ.ИД and
				   Н_ПЛАНЫ.УЧЕБНЫЙ_ГОД = '2010/2011'
			inner join Н_ОТДЕЛЫ
				on Н_ОТДЕЛЫ.ИД = Н_ПЛАНЫ.ОТД_ИД and
				   Н_ОТДЕЛЫ.КОРОТКОЕ_ИМЯ = 'КТиУ'
		group by Н_УЧЕНИКИ.ГРУППА	
	) as T1
where T1.kol > 10
order by T1.kol
;


5. Выведите таблицу со средними оценками студентов группы 4100 (Номер, ФИО, Ср_оценка), у которых средняя 
оценка равна максимальной оценк(е|и) в группе 3100.


select T1.ИД, T1.ФАМИЛИЯ, T1.ИМЯ, T1.ОТЧЕСТВО, T1.Ср_оценка from (
		select Н_ЛЮДИ.ИД, Н_ЛЮДИ.ФАМИЛИЯ, Н_ЛЮДИ.ИМЯ, Н_ЛЮДИ.ОТЧЕСТВО, 
		avg(cast(Н_ВЕДОМОСТИ.ОЦЕНКА as int4)) as Ср_оценка from Н_ОБУЧЕНИЯ
			inner join Н_УЧЕНИКИ
				on Н_УЧЕНИКИ.ЧЛВК_ИД = Н_ОБУЧЕНИЯ.ЧЛВК_ИД and
					Н_УЧЕНИКИ.ГРУППА = '4100'
			inner join Н_ЛЮДИ
				on Н_ЛЮДИ.ИД = Н_УЧЕНИКИ.ЧЛВК_ИД
			inner join Н_ВЕДОМОСТИ
				on Н_ЛЮДИ.ИД = Н_ВЕДОМОСТИ.ЧЛВК_ИД and 
					(Н_ВЕДОМОСТИ.ОЦЕНКА = '1' or  
					Н_ВЕДОМОСТИ.ОЦЕНКА = '2' or
					Н_ВЕДОМОСТИ.ОЦЕНКА = '3' or
					Н_ВЕДОМОСТИ.ОЦЕНКА = '4' or
					Н_ВЕДОМОСТИ.ОЦЕНКА = '5' )
		group by Н_ЛЮДИ.ИД, Н_ЛЮДИ.ФАМИЛИЯ, Н_ЛЮДИ.ИМЯ, Н_ЛЮДИ.ОТЧЕСТВО
	) as T1
where T1.Ср_оценка > (
		select max(cast(Н_ВЕДОМОСТИ.ОЦЕНКА as int4)) from Н_ОБУЧЕНИЯ
			inner join Н_УЧЕНИКИ
				on Н_УЧЕНИКИ.ЧЛВК_ИД = Н_ОБУЧЕНИЯ.ЧЛВК_ИД and
					Н_УЧЕНИКИ.ГРУППА = '3100'
			inner join Н_ЛЮДИ
				on Н_ЛЮДИ.ИД = Н_УЧЕНИКИ.ЧЛВК_ИД
			inner join Н_ВЕДОМОСТИ
				on Н_ЛЮДИ.ИД = Н_ВЕДОМОСТИ.ЧЛВК_ИД and 
					(Н_ВЕДОМОСТИ.ОЦЕНКА = '1' or 
					Н_ВЕДОМОСТИ.ОЦЕНКА = '2' or
					Н_ВЕДОМОСТИ.ОЦЕНКА = '3' or
					Н_ВЕДОМОСТИ.ОЦЕНКА = '4' or
					Н_ВЕДОМОСТИ.ОЦЕНКА = '5' )
		group by Н_УЧЕНИКИ.ГРУППА
	)
;

----------------------------------------------------------------------------------------
select T1.ИД, T1.ФАМИЛИЯ, T1.ИМЯ, T1.ОТЧЕСТВО, T1.Ср_оценка from (
		select Н_ЛЮДИ.ИД, Н_ЛЮДИ.ФАМИЛИЯ, Н_ЛЮДИ.ИМЯ, Н_ЛЮДИ.ОТЧЕСТВО, 
		avg(cast(Н_ВЕДОМОСТИ.ОЦЕНКА as int4)) as Ср_оценка from Н_ОБУЧЕНИЯ
			inner join Н_УЧЕНИКИ
				on Н_УЧЕНИКИ.ЧЛВК_ИД = Н_ОБУЧЕНИЯ.ЧЛВК_ИД and
					Н_УЧЕНИКИ.ГРУППА = '4100'
			inner join Н_ЛЮДИ
				on Н_ЛЮДИ.ИД = Н_УЧЕНИКИ.ЧЛВК_ИД
			inner join Н_ВЕДОМОСТИ
				on Н_ЛЮДИ.ИД = Н_ВЕДОМОСТИ.ЧЛВК_ИД and 
					(Н_ВЕДОМОСТИ.ОЦЕНКА = '99' or  
					Н_ВЕДОМОСТИ.ОЦЕНКА = '2' or
					Н_ВЕДОМОСТИ.ОЦЕНКА = '3' or
					Н_ВЕДОМОСТИ.ОЦЕНКА = '4' or
					Н_ВЕДОМОСТИ.ОЦЕНКА = '5' )
		group by Н_ЛЮДИ.ИД, Н_ЛЮДИ.ФАМИЛИЯ, Н_ЛЮДИ.ИМЯ, Н_ЛЮДИ.ОТЧЕСТВО
	) as T1
where T1.Ср_оценка > (
		select max(cast(Н_ВЕДОМОСТИ.ОЦЕНКА as int4)) from Н_ОБУЧЕНИЯ
			inner join Н_УЧЕНИКИ
				on Н_УЧЕНИКИ.ЧЛВК_ИД = Н_ОБУЧЕНИЯ.ЧЛВК_ИД and
					Н_УЧЕНИКИ.ГРУППА = '3100'
			inner join Н_ЛЮДИ
				on Н_ЛЮДИ.ИД = Н_УЧЕНИКИ.ЧЛВК_ИД
			inner join Н_ВЕДОМОСТИ
				on Н_ЛЮДИ.ИД = Н_ВЕДОМОСТИ.ЧЛВК_ИД and 
					(Н_ВЕДОМОСТИ.ОЦЕНКА = '99' or 
					Н_ВЕДОМОСТИ.ОЦЕНКА = '2' or
					Н_ВЕДОМОСТИ.ОЦЕНКА = '3' or
					Н_ВЕДОМОСТИ.ОЦЕНКА = '4' or
					Н_ВЕДОМОСТИ.ОЦЕНКА = '5' )
		group by Н_УЧЕНИКИ.ГРУППА
	)
;






select T1.ИД, T1.ФАМИЛИЯ, T1.ИМЯ, T1.ОТЧЕСТВО, T1.Ср_оценка from (
		select Н_ЛЮДИ.ИД, Н_ЛЮДИ.ФАМИЛИЯ, Н_ЛЮДИ.ИМЯ, Н_ЛЮДИ.ОТЧЕСТВО, 
		avg(cast(Н_ВЕДОМОСТИ.ОЦЕНКА as int4)) as Ср_оценка from Н_ОБУЧЕНИЯ
			inner join Н_УЧЕНИКИ
				on Н_УЧЕНИКИ.ЧЛВК_ИД = Н_ОБУЧЕНИЯ.ЧЛВК_ИД and
					Н_УЧЕНИКИ.ГРУППА = '4100'
			inner join Н_ЛЮДИ
				on Н_ЛЮДИ.ИД = Н_УЧЕНИКИ.ЧЛВК_ИД
			inner join Н_ВЕДОМОСТИ
				on Н_ЛЮДИ.ИД = Н_ВЕДОМОСТИ.ЧЛВК_ИД and 
					Н_ВЕДОМОСТИ.ОЦЕНКА != 'зачет' and
					Н_ВЕДОМОСТИ.ОЦЕНКА != 'неявка' and
					Н_ВЕДОМОСТИ.ОЦЕНКА != 'осв' and
					Н_ВЕДОМОСТИ.ОЦЕНКА != 'незач'
		group by Н_ЛЮДИ.ИД, Н_ЛЮДИ.ФАМИЛИЯ, Н_ЛЮДИ.ИМЯ, Н_ЛЮДИ.ОТЧЕСТВО
	) as T1
where T1.Ср_оценка > (
		select max(cast(Н_ВЕДОМОСТИ.ОЦЕНКА as int4)) from Н_ОБУЧЕНИЯ
			inner join Н_УЧЕНИКИ
				on Н_УЧЕНИКИ.ЧЛВК_ИД = Н_ОБУЧЕНИЯ.ЧЛВК_ИД and
					Н_УЧЕНИКИ.ГРУППА = '3100'
			inner join Н_ЛЮДИ
				on Н_ЛЮДИ.ИД = Н_УЧЕНИКИ.ЧЛВК_ИД
			inner join Н_ВЕДОМОСТИ
				on Н_ЛЮДИ.ИД = Н_ВЕДОМОСТИ.ЧЛВК_ИД and 
					Н_ВЕДОМОСТИ.ОЦЕНКА != 'зачет' and
					Н_ВЕДОМОСТИ.ОЦЕНКА != 'неявка' and
					Н_ВЕДОМОСТИ.ОЦЕНКА != 'осв' and
					Н_ВЕДОМОСТИ.ОЦЕНКА != 'незач'
		group by Н_УЧЕНИКИ.ГРУППА
	)
;








select max(cast(Н_ВЕДОМОСТИ.ОЦЕНКА as int4)) from Н_ОБУЧЕНИЯ
			inner join Н_УЧЕНИКИ
				on Н_УЧЕНИКИ.ЧЛВК_ИД = Н_ОБУЧЕНИЯ.ЧЛВК_ИД and
					Н_УЧЕНИКИ.ГРУППА = '3100'
			inner join Н_ЛЮДИ
				on Н_ЛЮДИ.ИД = Н_УЧЕНИКИ.ЧЛВК_ИД
			inner join Н_ВЕДОМОСТИ
				on Н_ЛЮДИ.ИД = Н_ВЕДОМОСТИ.ЧЛВК_ИД and 
					Н_ВЕДОМОСТИ.ОЦЕНКА != 'зачет' and
					Н_ВЕДОМОСТИ.ОЦЕНКА != 'неявка' and
					Н_ВЕДОМОСТИ.ОЦЕНКА != 'осв' and
					Н_ВЕДОМОСТИ.ОЦЕНКА != 'незач'
		group by Н_УЧЕНИКИ.ГРУППА
;




select Н_ВЕДОМОСТИ.ОЦЕНКА from Н_ОБУЧЕНИЯ
	inner join Н_УЧЕНИКИ
		on Н_УЧЕНИКИ.ЧЛВК_ИД = Н_ОБУЧЕНИЯ.ЧЛВК_ИД and
			Н_УЧЕНИКИ.ГРУППА = '3100'
	inner join Н_ЛЮДИ
		on Н_ЛЮДИ.ИД = Н_УЧЕНИКИ.ЧЛВК_ИД
	inner join Н_ВЕДОМОСТИ
		on Н_ЛЮДИ.ИД = Н_ВЕДОМОСТИ.ЧЛВК_ИД 
group by Н_ВЕДОМОСТИ.ОЦЕНКА
;




select Н_ЛЮДИ.ИД, Н_ЛЮДИ.ФАМИЛИЯ, Н_ЛЮДИ.ИМЯ, Н_ЛЮДИ.ОТЧЕСТВО, 
avg(cast(Н_ВЕДОМОСТИ.ОЦЕНКА as int4)) as Ср_оценка from Н_ОБУЧЕНИЯ
	inner join Н_УЧЕНИКИ
		on Н_УЧЕНИКИ.ЧЛВК_ИД = Н_ОБУЧЕНИЯ.ЧЛВК_ИД and
			Н_УЧЕНИКИ.ГРУППА = '4100'
	inner join Н_ЛЮДИ
		on Н_ЛЮДИ.ИД = Н_УЧЕНИКИ.ЧЛВК_ИД
	inner join Н_ВЕДОМОСТИ
		on Н_ЛЮДИ.ИД = Н_ВЕДОМОСТИ.ЧЛВК_ИД and 
			Н_ВЕДОМОСТИ.ОЦЕНКА != 'зачет' and
			Н_ВЕДОМОСТИ.ОЦЕНКА != 'неявка' and
			Н_ВЕДОМОСТИ.ОЦЕНКА != 'осв' and
			Н_ВЕДОМОСТИ.ОЦЕНКА != 'незач'
group by Н_ЛЮДИ.ИД, Н_ЛЮДИ.ФАМИЛИЯ, Н_ЛЮДИ.ИМЯ, Н_ЛЮДИ.ОТЧЕСТВО
;



inner join Н_ВЕДОМОСТИ
	on Н_ЛЮДИ.ИД = Н_ВЕДОМОСТИ.ЧЛВК_ИД and 
		Н_ВЕДОМОСТИ.ОЦЕНКА != 'зачет' and
		Н_ВЕДОМОСТИ.ОЦЕНКА != 'неявка' and
		Н_ВЕДОМОСТИ.ОЦЕНКА != 'осв' and
		Н_ВЕДОМОСТИ.ОЦЕНКА != 'незач'




6. Получить список студентов, отчисленных до первого сентября 2012 года с очной или заочной 
формы обучения (специальность: Программная инженерия). В результат включить:
номер группы;
номер, фамилию, имя и отчество студента;
номер пункта приказа;
Для реализации использовать соединение таблиц.



select Н_УЧЕНИКИ.ГРУППА, Н_ЛЮДИ.ИД, Н_ЛЮДИ.ФАМИЛИЯ, Н_ЛЮДИ.ИМЯ,
		 Н_ЛЮДИ.ОТЧЕСТВО, Н_УЧЕНИКИ.КОНЕЦ_ПО_ПРИКАЗУ from Н_НАПРАВЛЕНИЯ_СПЕЦИАЛ 
	inner join Н_НАПР_СПЕЦ
		on Н_НАПР_СПЕЦ.ИД = Н_НАПРАВЛЕНИЯ_СПЕЦИАЛ.НС_ИД and
			Н_НАПР_СПЕЦ.НАИМЕНОВАНИЕ = 'Программная инженерия'
	inner join Н_ПЛАНЫ
		on Н_ПЛАНЫ.НАПС_ИД = Н_НАПРАВЛЕНИЯ_СПЕЦИАЛ.ИД
	inner join Н_ФОРМЫ_ОБУЧЕНИЯ 
		on Н_ФОРМЫ_ОБУЧЕНИЯ.ИД = Н_ПЛАНЫ.ФО_ИД and
			Н_ФОРМЫ_ОБУЧЕНИЯ.НАИМЕНОВАНИЕ = 'Заочная'
	inner join Н_УЧЕНИКИ
		on Н_УЧЕНИКИ.ПЛАН_ИД = Н_ПЛАНЫ.ИД and
			Н_УЧЕНИКИ.КОНЕЦ_ПО_ПРИКАЗУ < Н_УЧЕНИКИ.КОНЕЦ and 
			Н_УЧЕНИКИ.КОНЕЦ_ПО_ПРИКАЗУ < '2012-09-01'
	inner join Н_ОБУЧЕНИЯ
		on Н_ОБУЧЕНИЯ.ЧЛВК_ИД = Н_УЧЕНИКИ.ЧЛВК_ИД
	inner join Н_ЛЮДИ
		on Н_ОБУЧЕНИЯ.ЧЛВК_ИД = Н_ЛЮДИ.ИД
union 
select Н_УЧЕНИКИ.ГРУППА, Н_ЛЮДИ.ИД, Н_ЛЮДИ.ФАМИЛИЯ, Н_ЛЮДИ.ИМЯ,
		 Н_ЛЮДИ.ОТЧЕСТВО, Н_УЧЕНИКИ.КОНЕЦ_ПО_ПРИКАЗУ from Н_НАПРАВЛЕНИЯ_СПЕЦИАЛ 
	inner join Н_НАПР_СПЕЦ
		on Н_НАПР_СПЕЦ.ИД = Н_НАПРАВЛЕНИЯ_СПЕЦИАЛ.НС_ИД and
			Н_НАПР_СПЕЦ.НАИМЕНОВАНИЕ = 'Программная инженерия'
	inner join Н_ПЛАНЫ
		on Н_ПЛАНЫ.НАПС_ИД = Н_НАПРАВЛЕНИЯ_СПЕЦИАЛ.ИД
	inner join Н_ФОРМЫ_ОБУЧЕНИЯ 
		on Н_ФОРМЫ_ОБУЧЕНИЯ.ИД = Н_ПЛАНЫ.ФО_ИД and
			Н_ФОРМЫ_ОБУЧЕНИЯ.НАИМЕНОВАНИЕ = 'Очная'
	inner join Н_УЧЕНИКИ
		on Н_УЧЕНИКИ.ПЛАН_ИД = Н_ПЛАНЫ.ИД and
			Н_УЧЕНИКИ.КОНЕЦ_ПО_ПРИКАЗУ < Н_УЧЕНИКИ.КОНЕЦ and
			Н_УЧЕНИКИ.КОНЕЦ_ПО_ПРИКАЗУ < '2012-09-01'
	inner join Н_ОБУЧЕНИЯ
		on Н_ОБУЧЕНИЯ.ЧЛВК_ИД = Н_УЧЕНИКИ.ЧЛВК_ИД
	inner join Н_ЛЮДИ
		on Н_ОБУЧЕНИЯ.ЧЛВК_ИД = Н_ЛЮДИ.ИД
;



7. Вывести список людей, не являющихся или не являвшихся студентами ФКТИУ (данные, о которых отсутствуют в таблице Н_УЧЕНИКИ).
 В запросе нельзя использовать DISTINCT.


select Н_ЛЮДИ.ИД, Н_ЛЮДИ.ФАМИЛИЯ, Н_ЛЮДИ.ИМЯ, Н_ЛЮДИ.ОТЧЕСТВО from (
		select Н_ОБУЧЕНИЯ.ЧЛВК_ИД from Н_ПЛАНЫ
			inner join Н_ОТДЕЛЫ
				on Н_ОТДЕЛЫ.ИД = Н_ПЛАНЫ.ОТД_ИД and
				   Н_ОТДЕЛЫ.КОРОТКОЕ_ИМЯ = 'КТиУ'
			inner join Н_УЧЕНИКИ
				on Н_УЧЕНИКИ.ПЛАН_ИД = Н_ПЛАНЫ.ИД
			inner join Н_ОБУЧЕНИЯ
				on Н_ОБУЧЕНИЯ.ЧЛВК_ИД = Н_УЧЕНИКИ.ЧЛВК_ИД
	) as T1
	right outer join Н_ЛЮДИ
		on Н_ЛЮДИ.ИД = T1.ЧЛВК_ИД
where T1.ЧЛВК_ИД is null
;

----------------------------------------------------------------------------------------------------
Н_ПЛАНЫ
Н_ОТДЕЛЫ
Н_УЧЕНИКИ
Н_ОБУЧЕНИЯ
Н_ЛЮДИ

select Н_ЛЮДИ.ИД, Н_ЛЮДИ.ФАМИЛИЯ, Н_ЛЮДИ.ИМЯ, Н_ЛЮДИ.ОТЧЕСТВО, Н_ОТДЕЛЫ.КОРОТКОЕ_ИМЯ from Н_ОБУЧЕНИЯ
	inner join Н_ЛЮДИ
		on Н_ОБУЧЕНИЯ.ЧЛВК_ИД = Н_ЛЮДИ.ИД and 
		   Н_ЛЮДИ.ИД = 114995
	inner join Н_УЧЕНИКИ
		on Н_ОБУЧЕНИЯ.ЧЛВК_ИД = Н_УЧЕНИКИ.ЧЛВК_ИД
	inner join Н_ПЛАНЫ
		on Н_УЧЕНИКИ.ПЛАН_ИД = Н_ПЛАНЫ.ИД
	inner join Н_ОТДЕЛЫ
		on Н_ОТДЕЛЫ.ИД = Н_ПЛАНЫ.ОТД_ИД
;



select Н_ЛЮДИ.ИД, Н_ЛЮДИ.ФАМИЛИЯ, Н_ЛЮДИ.ИМЯ, Н_ЛЮДИ.ОТЧЕСТВО, Н_ОТДЕЛЫ.КОРОТКОЕ_ИМЯ from Н_ОБУЧЕНИЯ
	inner join Н_ЛЮДИ
		on Н_ОБУЧЕНИЯ.ЧЛВК_ИД = Н_ЛЮДИ.ИД 
	inner join Н_УЧЕНИКИ
		on Н_ОБУЧЕНИЯ.ЧЛВК_ИД = Н_УЧЕНИКИ.ЧЛВК_ИД
	inner join Н_ПЛАНЫ
		on Н_УЧЕНИКИ.ПЛАН_ИД = Н_ПЛАНЫ.ИД
	inner join Н_ОТДЕЛЫ
		on Н_ОТДЕЛЫ.ИД = Н_ПЛАНЫ.ОТД_ИД
where Н_ЛЮДИ.ИД = 114995
;







select Н_ЛЮДИ.ИД, Н_ЛЮДИ.ФАМИЛИЯ, Н_ЛЮДИ.ИМЯ, Н_ЛЮДИ.ОТЧЕСТВО from Н_ЛЮДИ
	where Н_ЛЮДИ.ИД = 114995




114995
Косарева | Елена | Владимировна



-------+------------------------------+-------+-------
 public | Н_ВЕДОМОСТИ                  | table | ucheb
 public | Н_ВИДЫ_ОБУЧЕНИЯ              | table | ucheb
 public | Н_ВИДЫ_РАБОТ                 | table | ucheb
 public | Н_ГРУППЫ_ПЛАНОВ              | table | ucheb
 public | Н_ДИСЦИПЛИНЫ                 | table | ucheb
 public | Н_ИЗМ_ЛЮДИ                   | table | ucheb
 public | Н_КВАЛИФИКАЦИИ               | table | ucheb
 public | Н_КОМПОНЕНТЫ                 | table | ucheb
 public | Н_ЛЮДИ                       | table | ucheb
 public | Н_ЛЮДИ_ПО_ПАДЕЖАМ            | table | ucheb
 public | Н_НАПР_СПЕЦ                  | table | ucheb
 public | Н_НАПРАВЛЕНИЯ_СПЕЦИАЛ        | table | ucheb
 public | Н_ОБУЧЕНИЯ                   | table | ucheb
 public | Н_ОТДЕЛЫ                     | table | ucheb
 public | Н_ОЦЕНКИ                     | table | ucheb
 public | Н_ПЛАНЫ                      | table | ucheb
 public | Н_СВОЙСТВА_ВР                | table | ucheb
 public | Н_СВОЙСТВА_ОТДЕЛОВ           | table | ucheb
 public | Н_СЕССИЯ                     | table | ucheb
 public | Н_СОДЕРЖАНИЯ_ЭЛЕМЕНТОВ_СТРОК | table | ucheb
 public | Н_СТРОКИ_ПЛАНОВ              | table | ucheb
 public | Н_ТИПЫ_ВЕДОМОСТЕЙ            | table | ucheb
 public | Н_ТИПЫ_ПЛАНОВ                | table | ucheb
 public | Н_ТИПЫ_СТАНДАРТОВ            | table | ucheb
 public | Н_УЧЕБНЫЕ_ГОДА               | table | ucheb
 public | Н_УЧЕНИКИ                    | table | ucheb
 public | Н_ФОРМЫ_ОБУЧЕНИЯ             | table | ucheb
 public | Н_ХАРАКТЕРИСТИКИ_ВИДОВ_РАБОТ | table | ucheb
 public | Н_ХАРАКТЕРИСТИКИ_ОТДЕЛОВ     | table | ucheb
 public | Н_ЦИКЛЫ_ДИСЦИПЛИН            | table | ucheb
 public | Н_ЭЛЕМЕНТЫ_СТРОК             | table | ucheb





Lab 4
1. Сделать запрос для получения атрибутов из указанных таблиц, применив фильтры по указанным условиям:
Таблицы: Н_ЛЮДИ, Н_СЕССИЯ.
Вывести атрибуты: Н_ЛЮДИ.ОТЧЕСТВО, Н_СЕССИЯ.УЧГОД.
Фильтры (AND): 
a) Н_ЛЮДИ.ОТЧЕСТВО < Владимирович.
b) Н_СЕССИЯ.ДАТА < 2012-01-25.
c) Н_СЕССИЯ.ДАТА < 2012-01-25.
Вид соединения: LEFT JOIN.

EXPLAIN ANALYZE
select Н_ЛЮДИ.ОТЧЕСТВО, Н_СЕССИЯ.УЧГОД from Н_ЛЮДИ
	left outer join Н_СЕССИЯ
		on Н_ЛЮДИ.ИД = Н_СЕССИЯ.ЧЛВК_ИД
;  where Н_ЛЮДИ.ОТЧЕСТВО < 'Владимирович' and
  		Н_СЕССИЯ.ДАТА < '2012-01-25'
;





2. Сделать запрос для получения атрибутов из указанных таблиц, применив фильтры по указанным условиям:
Таблицы: Н_ЛЮДИ, Н_ВЕДОМОСТИ, Н_СЕССИЯ.
Вывести атрибуты: Н_ЛЮДИ.ИМЯ, Н_ВЕДОМОСТИ.ДАТА, Н_СЕССИЯ.ИД.
Фильтры (AND): 
a) Н_ЛЮДИ.ИД < 163484.
b) Н_ВЕДОМОСТИ.ЧЛВК_ИД > .
Вид соединения: INNER JOIN.

EXPLAIN ANALYZE
select Н_ЛЮДИ.ИМЯ, Н_ВЕДОМОСТИ.ДАТА, Н_СЕССИЯ.ИД from Н_ЛЮДИ
	inner join Н_ВЕДОМОСТИ
		on Н_ЛЮДИ.ИД = Н_ВЕДОМОСТИ.ЧЛВК_ИД
	inner join Н_СЕССИЯ
		on Н_ЛЮДИ.ИД = Н_СЕССИЯ.ЧЛВК_ИД
  where Н_ЛЮДИ.ИД < 163484 and 
  		Н_ВЕДОМОСТИ.ЧЛВК_ИД > 153285
 ;




EXPLAIN ANALYZE
select Н_ЛЮДИ.ИМЯ, Н_ВЕДОМОСТИ.ДАТА, Н_СЕССИЯ.ИД from Н_ЛЮДИ
	inner join Н_ВЕДОМОСТИ
		on Н_ВЕДОМОСТИ.ЧЛВК_ИД = Н_ЛЮДИ.ИД
	inner join Н_СЕССИЯ
		on Н_СЕССИЯ.ЧЛВК_ИД =  Н_ЛЮДИ.ИД
  where Н_ЛЮДИ.ИД < 163484 and 
  		Н_ВЕДОМОСТИ.ЧЛВК_ИД > 153285
 ;














----------------------------------------------------------------------------------
====================================================================================

=======================================================================================



К_Звёзды
К_Солнечные_Ситемы
К_Месторождения
К_Полезные_Ископаемые
К_Ископаемые_В_Месторождении
К_Ретрансляторы
К_Граф_Системы
К_Рассы
К_Виды_Классов
К_Персонажы
К_Космические_Станции
К_Тип_Предметов
К_Предметы_Инвентаря

К_Предметы_Станции

К_Инвентарь_Персонажа





К_Звёзды : таблица описывающая Звёзды во вселенной.
Атрибуты
Описание
Тип
id
Идентификационный номер звезды.
serial 
Название
Название звезды.
varchar 
Масса
Масса звезды относительно массы Земли.
real
CREATE TABLE "К_Звёзды" (
	"id" serial NOT NULL PRIMARY KEY,
	"Название" varchar NOT NULL,
	"Масса" real NOT NULL,
         check("Масса" > 0)
);








К_Солнечные_Ситемы : таблица описывающая солнечные системы.
Атрибуты
Описание
Тип
id
Идентификационный номер Системы.
serial 
Название
Название Солнечной Системы.
varchar 
Звезда
Идентификационный номер звезды
int
CREATE TABLE "К_Солнечные_Системы" (
	"id" serial NOT NULL PRIMARY KEY,
	"Название" varchar NOT NULL,
	"Звезда" int NOT NULL REFERENCES "К_Звёзды"("id")
);


К_Месторождения : таблица описывающая Месторождения.
Атрибуты
Описание
Тип
id
Идентификационный номер месторождения.
serial 
Название
Название месторождения.
varchar
Тип
Тип месторождения ( спутник или планета )
varchar
Масса
Масса месторождения относительно массы Земли.
real 
НаличиеАтмосферы
Да или Нет
boolean 
MinТемпература
Минимальная зарегистрированная температура
int 
MaxТемпература
Максимальная зарегистрированная температура
int 
СолнечнаяСистема
Идентификационный номер Солнечной Системы.
int 
CREATE TABLE "К_Месторождения" (
	"id" serial NOT NULL PRIMARY KEY,
	"Название" varchar NOT NULL,
          "Тип" varchar NOT NULL,
	"Масса" real NOT NULL,
	"НаличиеАтмосферы" boolean NOT NULL,
	"MinТемпература" int NOT NULL,
	"MaxТемпература" int NOT NULL,
          "СолнечнаяСистема" int NOT NULL REFERENCES "К_Солнечные_Системы"("id"),
          check("Масса" > 0),
          check("Тип" = "Планета" or "Тип" = "Спутник"),
          check("MinТемпература" <= "MaxТемпература")
);



К_Полезные_Ископаемые : таблица описывающая полезные ископаемые.
Атрибуты
Описание
Тип
id
Идентификационный номер минерала
serial
Название
Название минерала
varchar
Описание
Описание минералов
varchar
CREATE TABLE "К_Полезные_Ископаемые" (
	"id" serial NOT NULL PRIMARY KEY,
	"Название" varchar NOT NULL,
	"Описание" varchar NOT NULL
);












К_Ископаемые_В_Месторождении :  таблица описывающая полезные ископаемые в Месторождениях.
Атрибуты
Описание
Тип
id
Идентификационный  номер.
serial
Месторождение
Идентификационный  номер Месторождения.
int
Ресурс
Идентификационный  номер ресурса.
int
Количество
Количество единиц ресурса.
bigint 
CREATE TABLE "К_Ископаемые_В_Месторождении" (
        "id" serial NOT NULL PRIMARY KEY,
        "Месторождение" int NOT NULL REFERENCES "К_Месторождения"("id"),
        "Ресурс" int NOT NULL REFERENCES "К_Полезные_Ископаемые"("id"),
        "Количество" bigint NOT NULL,
        check("Количество" >= 0)
);

К_Ретрансляторы : таблица описывающая ретрансляторы 
Атрибуты
Описание
Тип
id
Идентификационный  номер ретранслятора
serial
Название
Название ретранслятора
varchar
Местонахождение
Идентификационный  номер солнечной системы
int
CREATE TABLE "К_Ретрансляторы" (
        "id" serial NOT NULL PRIMARY KEY,
        "Название" varchar  NOT NULL,
        "Месторождение" int NOT NULL REFERENCES "К_Месторождения"("id")
);








К_Граф_Системы :  таблица описывающая перемещения между солнечными системами
Атрибуты
Описание
Тип
id
Идентификационный  номер.
serial
Система1
Идентификационный  номер первой системы
int
Система2
Идентификационный  номер второй системы
int
ВремяПерелёта
Время для перелёта в световых днях
int
CREATE TABLE "К_Граф_Системы" (
       "id" serial NOT NULL PRIMARY KEY,
       "Система1" int NOT NULL REFERENCES "К_Солнечные_Системы"("id"),
       "Система2" int NOT NULL REFERENCES "К_Солнечные_Системы"("id"),
       "ВремяПерелёта" int NOT NULL,
      check("Система1" != "Система2")
);


К_Рассы :  таблица описывающая расы персонажей.
Атрибуты
Описание
Тип
id
Идентификационный  номер.
serial
Название
Название расы персонажа
varchar
Описание
Описание особенностей
varchar
CREATE TABLE "К_Рассы" (
	"id" serial NOT NULL PRIMARY KEY,
	"Название" varchar NOT NULL,
	"Описание" varchar NOT NULL,
);









К_Виды_Классов : таблица описывающая виды классов персонажей.
Атрибуты
Описание
Тип
id
идентификационный номер
serial
Название
Название данного класса
varchar
Описание
Описание особенностей
varchar
CREATE TABLE "К_Виды_Классов" (
	"id" serial NOT NULL PRIMARY KEY,
	"Название" varchar NOT NULL,
	"Описание" varchar NOT NULL,
);


К_Космические_Станции : таблица описывающая различные космические станции.
Атрибуты
Описание
Тип
id
Идентификационный номер станции.
serial
Название
Название станции.
varchar 
Масса
Масса станции относительно массы Земли.
real 
СолнечнаяСистема
Идентификационный номер Солнечной Системы.
int 
Кредиты
Количество кредит на станции
int
CREATE TABLE "К_Космические_Станции" (
	"id" serial NOT NULL PRIMARY KEY,
	"Название" varchar NOT NULL,
	"Масса" real NOT NULL,
	"СолнечнаяСистема" int NOT NULL REFERENCES "К_Солнечные_Системы"("id"),
          "Кредиты" int NOT NULL,
          check("Масса" > 0),
          check("Кредиты" >= 0)
);


К_Персонажы : таблица описывающая персонажей.
Атрибуты
Описание
Тип
id
Идентификационный номер персонажа.
serial
Имя
Имя персонажа
varchar 
Расса
Идентификационный  номер рассы персонажа
int 
Класс
Идентификационный  номер класса персонажа.
int 
Кредиты
Количество кредитов персонажа ( >= 0 )
int
Предыстория
Небольшая предыстория персонажа.
varchar
CREATE TABLE "К_Персонажы" (
	"id" serial NOT NULL PRIMARY KEY,
	"Имя" varchar NOT NULL,
	"Расса" int NOT NULL REFERENCES "К_Рассы"("id"),
	"Класс" int NOT NULL REFERENCES "К_Виды_Классов"("id"),
	"Кредиты" int NOT NULL,
	"Предыстория" varchar NOT NULL,
         check("Кредиты" >= 0)
);







К_Тип_Предметов : таблица описывающая тип предметов инвентаря.
Атрибуты
Описание
Тип
id
идентификационный номер
serial
Название
Название данного типа
varchar
Описание
Описание особенностей
varchar
CREATE TABLE "К_Тип_Предметов" (
	"id" serial NOT NULL PRIMARY KEY,
	"Название" varchar NOT NULL,
	"Описание" varchar NOT NULL,
);


К_Предметы_Инвентаря : таблица описывающая предметы инвентаря.
Атрибуты
Описание
Тип
id
Идентификационный номер предмета.
serial 
Назване
Название предмета.
varchar 
Тип

int
Характеристика

varchar
CREATE TABLE "К_Предметы_Инвентаря" (
	"id" serial NOT NULL PRIMARY KEY,
	"Название" varchar NOT NULL
          "Тип" int NOT NULL REFERENCES "К_Тип_Предметов"("id")
          "Характеристика" varchar NOT NULL
);


















К_Инвентарь_Персонажа : таблица описывающая инвентарь персонажа.
Атрибуты
Описание
Тип
id
Идентификационный номер.
serial 
Персонаж
Идентификационный номер персонажа.
int
Предмет
Идентификационный номер предмета инвентаря.
int
Количество
Количество данного предмета у персонажа
int
CREATE TABLE "К_Инвентарь_Персонажа" (
	"id" serial NOT NULL PRIMARY KEY,
	"Персонаж" int NOT NULL REFERENCES "К_Персонажы"("id"),
	"Предмет" int NOT NULL REFERENCES "К_Предметы_Инвентаря"("id"),
         "Количество" int NOT NULL,
         check("Количество" >= 0)
);






























К_Предметы_Станции : таблица описывающая предметы инвентаря на станции.
Атрибуты
Описание
Тип
id
Идентификационный номер.
serial 
Станция
Идентификационный номер станции.
int
Предмет
Идентификационный номер предмета инвентаря.
int
Цена
Цена предмета на этой станции в кредитах.
int
Количество
Количество данного предмета на станции
int
CREATE TABLE "К_Предметы_Станции" (
	"id" serial NOT NULL PRIMARY KEY,
	"Станция" int NOT NULL REFERENCES "К_Космические_Станции"("id"),
	"Предмет" int NOT NULL REFERENCES "К_Предметы_Инвентаря"("id"),
	"Цена" int NOT NULL,
         "	" int NOT NULL,
         check("Количество" >= 0),
           check("Цена" >= 0)
);







































































